sbc-bench v0.9.44 BeagleBoard.org BeagleBone AI-64 (Sat, 05 Aug 2023 10:52:08 +0000)

Distributor ID:	Debian
Description:	Debian GNU/Linux 12 (bookworm)
Release:	12
Codename:	bookworm

/usr/bin/gcc (Debian 12.2.0-14) 12.2.0

Uptime: 10:52:08 up 33 min,  4 users,  load average: 0.37, 1.08, 1.11,  Â°C,  151814262

Linux 5.10.168-ti-arm64-r108 (BeagleBone-AI64) 	08/05/23 	_aarch64_	(2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          50.33    0.01    2.61    1.56    0.00   45.49

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          25.09       611.73       773.45         0.00    1223041    1546388          0

               total        used        free      shared  buff/cache   available
Mem:           2.1Gi       246Mi       1.9Gi       676Ki        99Mi       1.9Gi
Swap:             0B          0B          0B

##########################################################################

Checking cpufreq OPP (Cortex-A72):

No cpufreq support available. Measured on cpu1: 1998 MHz (1998.575/1998.550/1998.525)

##########################################################################

Executing benchmark on cpu0 (Cortex-A72):

tinymembench v0.4.9-nuumio (simple benchmark for memory throughput and latency)

CFLAGS: 
bandwidth test min repeats (-b): 2
bandwidth test max repeats (-B): 3
bandwidth test mem realloc (-M): no      (-m for realloc)
      latency test repeats (-l): 3
        latency test count (-c): 1000000

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Test result is the best of repeated runs. Number of repeats  ==
==         is shown in brackets                                         ==
== Note 3: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 4: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 5: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                 :   2694.6 MB/s (3, 9.0%)
 C copy backwards (32 byte blocks)                :   2693.4 MB/s (2)
 C copy backwards (64 byte blocks)                :   2695.9 MB/s (2)
 C copy                                           :   2745.0 MB/s (3, 0.5%)
 C copy prefetched (32 bytes step)                :   2703.9 MB/s (2)
 C copy prefetched (64 bytes step)                :   2703.2 MB/s (3, 1.0%)
 C 2-pass copy                                    :   2548.9 MB/s (3, 0.3%)
 C 2-pass copy prefetched (32 bytes step)         :   2860.1 MB/s (3)
 C 2-pass copy prefetched (64 bytes step)         :   2861.1 MB/s (2)
 C scan 8                                         :    988.7 MB/s (2)
 C scan 16                                        :   1956.0 MB/s (2)
 C scan 32                                        :   3574.1 MB/s (3, 1.3%)
 C scan 64                                        :   4274.7 MB/s (2)
 C fill                                           :   8707.7 MB/s (2)
 C fill (shuffle within 16 byte blocks)           :   8711.3 MB/s (2)
 C fill (shuffle within 32 byte blocks)           :   8712.6 MB/s (2)
 C fill (shuffle within 64 byte blocks)           :   8708.8 MB/s (3, 1.5%)
 ---
 libc memcpy copy                                 :   2661.8 MB/s (2)
 libc memchr scan                                 :   4289.1 MB/s (2)
 libc memset fill                                 :   8710.4 MB/s (2)
 ---
 NEON LDP/STP copy                                :   2724.3 MB/s (2)
 NEON LDP/STP copy pldl2strm (32 bytes step)      :   2555.7 MB/s (3, 0.9%)
 NEON LDP/STP copy pldl2strm (64 bytes step)      :   2556.9 MB/s (2)
 NEON LDP/STP copy pldl1keep (32 bytes step)      :   2702.8 MB/s (2)
 NEON LDP/STP copy pldl1keep (64 bytes step)      :   2702.7 MB/s (2)
 NEON LD1/ST1 copy                                :   2722.0 MB/s (2)
 NEON LDP load                                    :   5219.3 MB/s (3, 5.5%)
 NEON LDNP load                                   :   4905.5 MB/s (3, 0.9%)
 NEON STP fill                                    :   8711.7 MB/s (2)
 NEON STNP fill                                   :   8678.9 MB/s (3, 0.3%)
 ARM LDP/STP copy                                 :   2733.1 MB/s (3, 1.1%)
 ARM LDP load                                     :   5218.7 MB/s (3, 6.1%)
 ARM LDNP load                                    :   4921.4 MB/s (3, 0.2%)
 ARM STP fill                                     :   8713.9 MB/s (2)
 ARM STNP fill                                    :   8679.8 MB/s (2)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)             :    331.6 MB/s (3, 0.3%)
 NEON LDP/STP 2-pass copy (from framebuffer)      :    310.9 MB/s (2)
 NEON LD1/ST1 copy (from framebuffer)             :    809.4 MB/s (2)
 NEON LD1/ST1 2-pass copy (from framebuffer)      :    704.2 MB/s (2)
 ARM LDP/STP copy (from framebuffer)              :    139.1 MB/s (2)
 ARM LDP/STP 2-pass copy (from framebuffer)       :    138.2 MB/s (3, 0.3%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.0 ns 
    131072 :    7.0 ns          /     9.3 ns 
    262144 :   10.1 ns          /    12.3 ns 
    524288 :   12.0 ns          /    14.2 ns 
   1048576 :   27.0 ns          /    40.8 ns 
   2097152 :   98.4 ns          /   147.4 ns 
   4194304 :  138.4 ns          /   183.3 ns 
   8388608 :  169.1 ns          /   205.7 ns 
  16777216 :  196.3 ns          /   233.0 ns 
  33554432 :  213.7 ns          /   251.4 ns 
  67108864 :  230.9 ns          /   279.2 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    4.6 ns          /     7.0 ns 
    131072 :    7.0 ns          /     9.2 ns 
    262144 :    8.3 ns          /    10.0 ns 
    524288 :    9.3 ns          /    10.3 ns 
   1048576 :   15.3 ns          /    18.7 ns 
   2097152 :   95.8 ns          /   143.5 ns 
   4194304 :  135.0 ns          /   178.8 ns 
   8388608 :  156.8 ns          /   190.3 ns 
  16777216 :  180.9 ns          /   212.0 ns 
  33554432 :  194.4 ns          /   224.0 ns 
  67108864 :  205.1 ns          /   232.2 ns 

##########################################################################

Executing ramlat on cpu0 (Cortex-A72), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 2.538 2.517 2.502 2.502 2.003 2.002 2.032 4.003 
         8k: 2.502 2.502 2.504 2.502 2.002 2.002 2.027 4.004 
        16k: 2.507 2.502 2.502 2.503 2.003 2.002 2.469 4.004 
        32k: 2.506 2.504 2.504 2.503 2.004 2.003 2.553 4.007 
        64k: 12.80 11.51 12.74 11.51 12.25 11.46 16.80 33.40 
       128k: 12.98 11.51 12.97 11.51 12.50 11.35 16.88 34.23 
       256k: 13.01 11.51 12.99 11.51 12.49 11.33 16.77 34.27 
       512k: 13.05 11.57 13.01 11.85 12.50 11.28 17.92 34.19 
      1024k: 29.62 30.02 28.69 30.29 31.44 30.65 43.60 74.02 
      2048k: 185.9 266.2 183.2 265.0 183.3 165.9 195.4 212.3 
      4096k: 177.8 274.9 182.3 267.5 182.3 187.5 212.8 228.9 
      8192k: 203.5 301.4 202.1 306.8 204.9 202.0 208.5 234.1 
     16384k: 230.5 325.7 232.2 325.9 237.0 221.9 223.7 290.2 
     32768k: 239.0 334.4 243.0 335.0 246.4 235.1 237.7 284.3 
     65536k: 240.8 342.5 245.0 339.1 246.9 238.7 243.3 280.5 
    131072k: 245.9 343.3 248.3 342.6 251.1 240.0 244.0 280.7 

##########################################################################

Executing benchmark twice on cluster 0 (Cortex-A72)

OpenSSL 3.0.9, built on 30 May 2023 (Library: OpenSSL 3.0.9 30 May 2023)
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-128-cbc     335432.20k   809391.02k  1240151.47k  1415902.21k  1493699.24k  1489376.60k
aes-128-cbc     222993.05k   616868.86k  1109954.82k  1369308.50k  1490425.17k  1491129.69k
aes-192-cbc     296393.74k   742628.82k  1069989.97k  1253347.33k  1321817.43k  1322669.40k
aes-192-cbc     191706.26k   555826.37k   936461.14k  1213120.17k  1306331.82k  1312473.09k
aes-256-cbc     210695.81k   540975.38k   895250.18k  1056777.22k  1129755.99k  1130348.54k
aes-256-cbc     248757.13k   587165.21k   912203.52k  1066187.78k  1131394.39k  1130425.00k

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A72)

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,2 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:    2177 MB,  # CPU hardware threads:   2
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1621    99   1589   1578  |      25119   100   2149   2145
23:       1562    99   1602   1592  |      24562   100   2132   2126
24:       1517    99   1643   1632  |      24156   100   2125   2121
25:       1482    99   1703   1693  |      23521   100   2098   2094
----------------------------------  | ------------------------------
Avr:              99   1634   1623  |              100   2126   2121
Tot:             100   1880   1872

##########################################################################

Executing benchmark 3 times multi-threaded on CPUs 0-1

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,2 CPUs LE)

LE
CPU Freq: - - - - 128000000 256000000 - - -

RAM size:    2177 MB,  # CPU hardware threads:   2
RAM usage:    441 MB,  # Benchmark threads:      2

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2781   173   1566   2706  |      49143   199   2112   4196
23:       2647   176   1535   2698  |      48185   199   2097   4171
24:       2608   177   1583   2805  |      47033   199   2077   4129
25:       2585   176   1673   2952  |      45798   199   2051   4076
----------------------------------  | ------------------------------
Avr:             176   1589   2790  |              199   2084   4143
Tot:             187   1837   3467

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,2 CPUs LE)

LE
CPU Freq: - - - - - - - - 2048000000

RAM size:    2177 MB,  # CPU hardware threads:   2
RAM usage:    441 MB,  # Benchmark threads:      2

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2793   174   1560   2718  |      49169   199   2110   4198
23:       2823   181   1590   2877  |      47662   198   2086   4126
24:       2635   178   1593   2834  |      46729   198   2070   4102
25:       2632   178   1690   3005  |      45825   199   2050   4079
----------------------------------  | ------------------------------
Avr:             178   1608   2858  |              199   2079   4126
Tot:             188   1843   3492

7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,64 bits,2 CPUs LE)

LE
CPU Freq: - - - 64000000 - - - - -

RAM size:    2177 MB,  # CPU hardware threads:   2
RAM usage:    441 MB,  # Benchmark threads:      2

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       2801   175   1561   2725  |      49023   198   2113   4186
23:       2598   174   1520   2647  |      48117   199   2096   4165
24:       2542   175   1560   2733  |      46933   199   2074   4120
25:       2525   175   1650   2883  |      45873   199   2051   4083
----------------------------------  | ------------------------------
Avr:             175   1573   2747  |              199   2084   4138
Tot:             187   1828   3443

Compression: 2790,2858,2747
Decompression: 4143,4126,4138
Total: 3467,3492,3443

##########################################################################

Testing maximum cpufreq again, still under full load. System health now:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
11:00:07: n/a MHz    1.97  95%   1%  93%   0%   0%   0%      Â°C

Checking cpufreq OPP (Cortex-A72):

No cpufreq support available. Measured on cpu1: 1998 MHz (1998.565/1998.540/1998.540)

##########################################################################

System health while running tinymembench:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
10:52:13: n/a MHz    0.42  54%   2%  50%   0%   1%   0%      Â°C
10:52:23: n/a MHz    0.51  50%   0%  49%   0%   0%   0%      Â°C
10:52:33: n/a MHz    0.59  50%   0%  49%   0%   0%   0%      Â°C
10:52:43: n/a MHz    0.65  57%   0%  49%   0%   6%   0%      Â°C
10:52:54: n/a MHz    0.70  50%   0%  49%   0%   0%   0%      Â°C
10:53:04: n/a MHz    0.75  50%   0%  49%   0%   0%   0%      Â°C
10:53:14: n/a MHz    0.86  50%   0%  49%   0%   0%   0%      Â°C
10:53:24: n/a MHz    0.88  50%   0%  49%   0%   0%   0%      Â°C
10:53:34: n/a MHz    0.90  50%   0%  50%   0%   0%   0%      Â°C
10:53:44: n/a MHz    0.92  50%   0%  49%   0%   0%   0%      Â°C

System health while running ramlat:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
10:53:52: n/a MHz    0.93  54%   2%  50%   0%   1%   0%      Â°C
10:53:55: n/a MHz    0.94  50%   0%  50%   0%   0%   0%      Â°C
10:53:58: n/a MHz    0.94  50%   0%  50%   0%   0%   0%      Â°C
10:54:01: n/a MHz    0.94  50%   0%  50%   0%   0%   0%      Â°C
10:54:05: n/a MHz    0.94  50%   0%  50%   0%   0%   0%      Â°C
10:54:08: n/a MHz    0.95  51%   0%  49%   0%   0%   0%      Â°C
10:54:11: n/a MHz    0.95  50%   0%  49%   0%   0%   0%      Â°C
10:54:14: n/a MHz    0.95  50%   0%  49%   0%   0%   0%      Â°C
10:54:17: n/a MHz    0.96  50%   0%  49%   0%   0%   0%      Â°C
10:54:20: n/a MHz    0.96  50%   1%  49%   0%   0%   0%      Â°C
10:54:23: n/a MHz    0.96  50%   1%  48%   0%   0%   0%      Â°C

System health while running OpenSSL benchmark:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
10:54:25: n/a MHz    0.96  54%   2%  50%   0%   1%   0%      Â°C
10:54:41: n/a MHz    0.97  50%   0%  50%   0%   0%   0%      Â°C
10:54:57: n/a MHz    0.98  50%   0%  49%   0%   0%   0%      Â°C
10:55:13: n/a MHz    0.98  50%   0%  50%   0%   0%   0%      Â°C
10:55:29: n/a MHz    0.99  50%   0%  49%   0%   0%   0%      Â°C
10:55:45: n/a MHz    0.99  50%   0%  49%   0%   0%   0%      Â°C
10:56:01: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C

System health while running 7-zip single core benchmark:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
10:56:13: n/a MHz    1.00  54%   2%  50%   0%   1%   0%      Â°C
10:56:19: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:56:25: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:56:31: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:56:37: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:56:43: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:56:50: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:56:56: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:57:02: n/a MHz    1.00  50%   1%  49%   0%   0%   0%      Â°C
10:57:08: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:57:14: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:57:20: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C
10:57:26: n/a MHz    1.00  50%   0%  49%   0%   0%   0%      Â°C

System health while running 7-zip multi core benchmark:

Time      CPU n/a    load %cpu %sys %usr %nice %io %irq   Temp
10:57:31: n/a MHz    1.16  54%   2%  50%   0%   1%   0%      Â°C
10:57:56: n/a MHz    1.52  95%   0%  93%   0%   0%   0%      Â°C
10:58:21: n/a MHz    1.56  92%   2%  89%   0%   0%   0%      Â°C
10:58:48: n/a MHz    1.71  94%   1%  92%   0%   0%   0%      Â°C
10:59:14: n/a MHz    1.95  93%   1%  91%   0%   0%   0%      Â°C
10:59:40: n/a MHz    1.97  96%   1%  94%   0%   0%   0%      Â°C
11:00:07: n/a MHz    1.97  95%   1%  93%   0%   0%   0%      Â°C

##########################################################################

Linux 5.10.168-ti-arm64-r108 (BeagleBone-AI64) 	08/05/23 	_aarch64_	(2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          53.22    0.01    2.33    1.27    0.00   43.16

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk0          20.52       495.71       634.24         0.00    1241057    1587864          0

               total        used        free      shared  buff/cache   available
Mem:           2.1Gi       245Mi       1.9Gi       668Ki       111Mi       1.9Gi
Swap:             0B          0B          0B

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        0        0       -      -     Cortex-A72 / r1p0
  1        0        0       -      -     Cortex-A72 / r1p0

Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
CPU(s):                          2
On-line CPU(s) list:             0,1
Vendor ID:                       ARM
Model name:                      Cortex-A72
Model:                           0
Thread(s) per core:              1
Core(s) per cluster:             2
Socket(s):                       -
Cluster(s):                      1
Stepping:                        r1p0
BogoMIPS:                        400.00
Flags:                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
L1d cache:                       64 KiB (2 instances)
L1i cache:                       96 KiB (2 instances)
L2 cache:                        1 MiB (1 instance)
Vulnerability Itlb multihit:     Not affected
Vulnerability L1tf:              Not affected
Vulnerability Mds:               Not affected
Vulnerability Meltdown:          Not affected
Vulnerability Mmio stale data:   Not affected
Vulnerability Retbleed:          Not affected
Vulnerability Spec store bypass: Not affected
Vulnerability Spectre v1:        Mitigation; __user pointer sanitization
Vulnerability Spectre v2:        Mitigation; CSV2, BHB
Vulnerability Srbds:             Not affected
Vulnerability Tsx async abort:   Not affected

SoC guess: TI J721E
DT compat: beagle,j721e-beagleboneai64
           ti,j721e
 Compiler: /usr/bin/gcc (Debian 12.2.0-14) 12.2.0 / aarch64-linux-gnu
 Userland: arm64
   Kernel: 5.10.168-ti-arm64-r108/aarch64
           CONFIG_HZ=250
           CONFIG_HZ_250=y
           CONFIG_PREEMPT_NONE=y
           CONFIG_PREEMPT_NOTIFIERS=y

##########################################################################

Kernel 5.10.168 is not latest 5.10.191 LTS that was released on 2023-08-16.

See https://endoflife.date/linux for details. It is somewhat likely that some
exploitable vulnerabilities exist for this kernel as well as many unfixed bugs.

##########################################################################

Results validation:

  * Background activity (%system) OK
  * Throttling occured

Status of performance related policies found below /sys:

  * /sys/module/pcie_aspm/parameters/policy: [default] performance powersave powersupersave

| BeagleBoard.org BeagleBone AI-64 | ~2000 MHz | 5.10 | Debian GNU/Linux 12 (bookworm) arm64 | 3470 | 1872 | 1130390 | 2660 | 8710 | - |