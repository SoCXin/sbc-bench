sbc-bench v0.9.36 Hardkernel Odroid XU4 review (Wed, 01 Mar 2023 17:23:30 +0100)

Distributor ID:	Ubuntu
Description:	Ubuntu 20.04.3 LTS
Release:	20.04
Codename:	focal
Build system:   https://github.com/armbian/build, 21.08.3, Odroid XU4, odroidxu4, odroidxu4

/usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0

Uptime: 17:23:31 up 2 min,  1 user,  load average: 0.49, 0.32, 0.13,  31.0Â°C,  223604186

Linux 5.4.151-odroidxu4 (odroidxu4) 	03/01/23 	_armv7l_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           3.23    0.12    4.35    1.83    0.00   90.47

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk1          49.38       853.20       166.70     76074.92     148449      29004   13236276
sda               1.45        32.07         0.00         0.00       5580          0          0
zram0             3.27        13.06         0.02         0.00       2272          4          0
zram1             6.29         2.64        22.51         0.00        460       3916          0

              total        used        free      shared  buff/cache   available
Mem:          1.9Gi       129Mi       1.8Gi       4.0Mi        68Mi       1.8Gi
Swap:         995Mi          0B       995Mi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1019112	0	5

##########################################################################

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A7):

Cpufreq OPP: 1400    Measured: 1396 (1397.227/1396.755/1396.637)
Cpufreq OPP: 1300    Measured: 1297 (1297.148/1297.148/1297.084)
Cpufreq OPP: 1200    Measured: 1197 (1197.500/1197.446/1197.338)
Cpufreq OPP: 1100    Measured: 1097 (1097.260/1097.237/1097.214)
Cpufreq OPP: 1000    Measured:  997    (997.642/997.619/997.595)
Cpufreq OPP:  900    Measured:  897    (897.736/897.470/897.432)
Cpufreq OPP:  800    Measured:  797    (797.869/797.869/797.832)
Cpufreq OPP:  700    Measured:  697    (697.817/697.803/697.803)
Cpufreq OPP:  600    Measured:  598    (598.224/598.224/598.211)
Cpufreq OPP:  500    Measured:  498    (498.273/498.273/498.204)
Cpufreq OPP:  400    Measured:  398    (398.391/398.391/398.345)
Cpufreq OPP:  300    Measured:  298    (298.553/298.245/298.200)
Cpufreq OPP:  200    Measured:  198    (198.648/198.648/198.630)

Checking cpufreq OPP for cpu4-cpu7 (Cortex-A15):

Cpufreq OPP: 2000    Measured: 1996 (1996.145/1996.145/1996.049)
Cpufreq OPP: 1900    Measured: 1896 (1896.512/1896.468/1896.338)
Cpufreq OPP: 1800    Measured: 1796 (1796.691/1796.691/1796.652)
Cpufreq OPP: 1700    Measured: 1696 (1696.412/1696.377/1696.377)
Cpufreq OPP: 1600    Measured: 1596 (1596.725/1596.725/1596.648)
Cpufreq OPP: 1500    Measured: 1497 (1497.079/1497.045/1496.977)
Cpufreq OPP: 1400    Measured: 1396 (1397.316/1396.725/1396.666)
Cpufreq OPP: 1300    Measured: 1297 (1297.148/1297.116/1297.116)
Cpufreq OPP: 1200    Measured: 1197 (1197.446/1197.446/1197.446)
Cpufreq OPP: 1100    Measured: 1097 (1097.237/1097.214/1097.214)
Cpufreq OPP: 1000    Measured:  997    (997.619/997.572/997.548)
Cpufreq OPP:  900    Measured:  897    (897.946/897.413/897.393)
Cpufreq OPP:  800    Measured:  797    (797.869/797.813/797.813)
Cpufreq OPP:  700    Measured:  697    (697.831/697.817/697.803)
Cpufreq OPP:  600    Measured:  598    (598.264/598.250/598.211)
Cpufreq OPP:  500    Measured:  498    (498.284/498.261/498.238)
Cpufreq OPP:  400    Measured:  398    (398.437/398.437/398.409)
Cpufreq OPP:  300    Measured:  298    (298.611/298.604/298.457)
Cpufreq OPP:  200    Measured:  198    (198.701/198.688/198.675)

##########################################################################

Executing benchmark on cpu0 (Cortex-A7):

tinymembench v0.4.9-nuumio (simple benchmark for memory throughput and latency)

CFLAGS: 
bandwidth test min repeats (-b): 2
bandwidth test max repeats (-B): 3
bandwidth test mem realloc (-M): no      (-m for realloc)
      latency test repeats (-l): 3
        latency test count (-c): 1000000

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Test result is the best of repeated runs. Number of repeats  ==
==         is shown in brackets                                         ==
== Note 3: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 4: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 5: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                 :    213.1 MB/s (3, 0.2%)
 C copy backwards (32 byte blocks)                :    265.8 MB/s (2)
 C copy backwards (64 byte blocks)                :    272.9 MB/s (2)
 C copy                                           :    272.9 MB/s (2)
 C copy prefetched (32 bytes step)                :    527.6 MB/s (2)
 C copy prefetched (64 bytes step)                :    737.6 MB/s (2)
 C 2-pass copy                                    :    288.9 MB/s (2)
 C 2-pass copy prefetched (32 bytes step)         :    407.4 MB/s (2)
 C 2-pass copy prefetched (64 bytes step)         :    425.0 MB/s (2)
 C scan 8                                         :    131.8 MB/s (2)
 C scan 16                                        :    198.9 MB/s (3, 0.3%)
 C scan 32                                        :    265.7 MB/s (2)
 C scan 64                                        :    385.6 MB/s (2)
 C fill                                           :    805.0 MB/s (3, 0.2%)
 C fill (shuffle within 16 byte blocks)           :    805.2 MB/s (2)
 C fill (shuffle within 32 byte blocks)           :    499.7 MB/s (2)
 C fill (shuffle within 64 byte blocks)           :    510.9 MB/s (3, 0.4%)
 ---
 libc memcpy copy                                 :    330.5 MB/s (2)
 libc memchr scan                                 :    424.2 MB/s (2)
 libc memset fill                                 :    799.6 MB/s (3, 0.2%)
 ---
 NEON read                                        :    522.2 MB/s (2)
 NEON read prefetched (32 bytes step)             :    923.8 MB/s (2)
 NEON read prefetched (64 bytes step)             :   1012.7 MB/s (2)
 NEON read 2 data streams                         :    473.2 MB/s (2)
 NEON read 2 data streams prefetched (32 bytes step) :    958.0 MB/s (2)
 NEON read 2 data streams prefetched (64 bytes step) :   1002.4 MB/s (2)
 NEON copy                                        :    283.4 MB/s (2)
 NEON copy prefetched (32 bytes step)             :    690.4 MB/s (2)
 NEON copy prefetched (64 bytes step)             :    748.6 MB/s (2)
 NEON unrolled copy                               :    292.5 MB/s (2)
 NEON unrolled copy prefetched (32 bytes step)    :    443.3 MB/s (2)
 NEON unrolled copy prefetched (64 bytes step)    :    655.0 MB/s (2)
 NEON copy backwards                              :    279.3 MB/s (2)
 NEON copy backwards prefetched (32 bytes step)   :    685.0 MB/s (2)
 NEON copy backwards prefetched (64 bytes step)   :    743.9 MB/s (2)
 NEON 2-pass copy                                 :    290.7 MB/s (2)
 NEON 2-pass copy prefetched (32 bytes step)      :    414.4 MB/s (2)
 NEON 2-pass copy prefetched (64 bytes step)      :    440.5 MB/s (2)
 NEON unrolled 2-pass copy                        :    274.6 MB/s (2)
 NEON unrolled 2-pass copy prefetched (32 bytes step) :    373.7 MB/s (2)
 NEON unrolled 2-pass copy prefetched (64 bytes step) :    405.7 MB/s (2)
 NEON fill                                        :    804.9 MB/s (3, 0.2%)
 NEON fill backwards                              :    804.9 MB/s (2)
 VFP copy                                         :    278.8 MB/s (2)
 VFP 2-pass copy                                  :    269.4 MB/s (2)
 ARM fill (STRD)                                  :    799.4 MB/s (3, 0.3%)
 ARM fill (STM with 8 registers)                  :    804.5 MB/s (2)
 ARM fill (STM with 4 registers)                  :    804.4 MB/s (2)
 ARM copy prefetched (incr pld)                   :    674.1 MB/s (2)
 ARM copy prefetched (wrap pld)                   :    653.2 MB/s (2)
 ARM 2-pass copy prefetched (incr pld)            :    417.9 MB/s (2)
 ARM 2-pass copy prefetched (wrap pld)            :    409.0 MB/s (2)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.1 ns          /     0.0 ns 
     65536 :    4.3 ns          /     7.5 ns 
    131072 :    6.7 ns          /    10.8 ns 
    262144 :    8.2 ns          /    12.3 ns 
    524288 :   12.0 ns          /    14.7 ns 
   1048576 :   76.7 ns          /   117.6 ns 
   2097152 :  116.2 ns          /   154.5 ns 
   4194304 :  137.0 ns          /   167.2 ns 
   8388608 :  148.5 ns          /   173.6 ns 
  16777216 :  157.1 ns          /   181.4 ns 
  33554432 :  165.3 ns          /   194.1 ns 
  67108864 :  176.6 ns          /   214.8 ns 

Executing benchmark on cpu4 (Cortex-A15):

tinymembench v0.4.9-nuumio (simple benchmark for memory throughput and latency)

CFLAGS: 
bandwidth test min repeats (-b): 2
bandwidth test max repeats (-B): 3
bandwidth test mem realloc (-M): no      (-m for realloc)
      latency test repeats (-l): 3
        latency test count (-c): 1000000

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Test result is the best of repeated runs. Number of repeats  ==
==         is shown in brackets                                         ==
== Note 3: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 4: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 5: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                 :   1185.8 MB/s (3, 0.8%)
 C copy backwards (32 byte blocks)                :   1151.8 MB/s (2)
 C copy backwards (64 byte blocks)                :   2349.3 MB/s (2)
 C copy                                           :   2534.8 MB/s (2)
 C copy prefetched (32 bytes step)                :   2808.2 MB/s (2)
 C copy prefetched (64 bytes step)                :   2870.0 MB/s (2)
 C 2-pass copy                                    :   1395.6 MB/s (2)
 C 2-pass copy prefetched (32 bytes step)         :   1646.0 MB/s (2)
 C 2-pass copy prefetched (64 bytes step)         :   1657.7 MB/s (2)
 C scan 8                                         :    655.3 MB/s (2)
 C scan 16                                        :   1183.0 MB/s (2)
 C scan 32                                        :   1893.5 MB/s (2)
 C scan 64                                        :   2392.4 MB/s (3, 0.8%)
 C fill                                           :   4847.5 MB/s (3, 0.8%)
 C fill (shuffle within 16 byte blocks)           :   1846.0 MB/s (2)
 C fill (shuffle within 32 byte blocks)           :   1848.0 MB/s (2)
 C fill (shuffle within 64 byte blocks)           :   1928.9 MB/s (2)
 ---
 libc memcpy copy                                 :   2286.5 MB/s (2)
 libc memchr scan                                 :   3050.9 MB/s (2)
 libc memset fill                                 :   4837.3 MB/s (3, 0.7%)
 ---
 NEON read                                        :   3416.0 MB/s (2)
 NEON read prefetched (32 bytes step)             :   4291.6 MB/s (2)
 NEON read prefetched (64 bytes step)             :   4299.6 MB/s (2)
 NEON read 2 data streams                         :   3450.7 MB/s (3, 0.8%)
 NEON read 2 data streams prefetched (32 bytes step) :   4430.6 MB/s (2)
 NEON read 2 data streams prefetched (64 bytes step) :   4437.2 MB/s (2)
 NEON copy                                        :   2674.3 MB/s (2)
 NEON copy prefetched (32 bytes step)             :   3013.8 MB/s (2)
 NEON copy prefetched (64 bytes step)             :   3005.6 MB/s (2)
 NEON unrolled copy                               :   2302.4 MB/s (2)
 NEON unrolled copy prefetched (32 bytes step)    :   3361.6 MB/s (2)
 NEON unrolled copy prefetched (64 bytes step)    :   3383.4 MB/s (2)
 NEON copy backwards                              :   1240.2 MB/s (2)
 NEON copy backwards prefetched (32 bytes step)   :   1442.0 MB/s (2)
 NEON copy backwards prefetched (64 bytes step)   :   1441.4 MB/s (2)
 NEON 2-pass copy                                 :   2084.2 MB/s (3, 1.0%)
 NEON 2-pass copy prefetched (32 bytes step)      :   2258.5 MB/s (2)
 NEON 2-pass copy prefetched (64 bytes step)      :   2261.2 MB/s (2)
 NEON unrolled 2-pass copy                        :   1411.5 MB/s (2)
 NEON unrolled 2-pass copy prefetched (32 bytes step) :   1752.2 MB/s (2)
 NEON unrolled 2-pass copy prefetched (64 bytes step) :   1767.0 MB/s (2)
 NEON fill                                        :   4835.3 MB/s (3, 0.4%)
 NEON fill backwards                              :   1859.6 MB/s (2)
 VFP copy                                         :   2455.2 MB/s (2)
 VFP 2-pass copy                                  :   1336.8 MB/s (2)
 ARM fill (STRD)                                  :   4864.3 MB/s (3, 0.6%)
 ARM fill (STM with 8 registers)                  :   4887.5 MB/s (3, 1.2%)
 ARM fill (STM with 4 registers)                  :   4912.4 MB/s (3, 0.2%)
 ARM copy prefetched (incr pld)                   :   3121.6 MB/s (2)
 ARM copy prefetched (wrap pld)                   :   2941.2 MB/s (2)
 ARM 2-pass copy prefetched (incr pld)            :   1732.5 MB/s (2)
 ARM 2-pass copy prefetched (wrap pld)            :   1686.3 MB/s (2)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.2 ns 
      2048 :    0.0 ns          /     0.2 ns 
      4096 :    0.0 ns          /     0.2 ns 
      8192 :    0.0 ns          /     0.2 ns 
     16384 :    0.0 ns          /     0.2 ns 
     32768 :    0.1 ns          /     0.1 ns 
     65536 :    4.5 ns          /     7.0 ns 
    131072 :    6.9 ns          /     9.0 ns 
    262144 :   10.1 ns          /    11.8 ns 
    524288 :   12.1 ns          /    13.7 ns 
   1048576 :   14.8 ns          /    14.6 ns 
   2097152 :   34.1 ns          /    40.3 ns 
   4194304 :   95.1 ns          /   141.7 ns 
   8388608 :  134.6 ns          /   179.3 ns 
  16777216 :  153.2 ns          /   195.8 ns 
  33554432 :  169.4 ns          /   213.9 ns 
  67108864 :  179.1 ns          /   229.4 ns 

##########################################################################

Executing ramlat on cpu0 (Cortex-A7), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 2.166 2.169 2.327 2.372 2.148 2.148 2.954 5.906 
         8k: 2.148 2.148 2.327 2.372 2.148 2.148 2.954 5.907 
        16k: 2.148 2.149 2.327 2.372 2.149 2.149 2.954 5.909 
        32k: 6.891 8.166 7.024 8.477 6.757 8.543 15.10 30.15 
        64k: 9.120 12.24 9.209 12.79 9.027 12.31 22.03 45.85 
       128k: 9.966 13.14 10.09 13.65 9.913 13.13 24.77 51.55 
       256k: 13.80 20.78 13.75 21.41 13.63 20.70 37.75 82.90 
       512k: 46.74 56.44 46.49 56.80 46.37 57.83 105.4 217.6 
      1024k: 119.9 119.2 119.9 120.3 119.8 123.4 224.8 470.6 
      2048k: 155.2 150.2 155.0 152.2 155.1 153.7 276.0 543.5 
      4096k: 158.2 154.2 158.2 156.1 158.2 157.1 286.2 558.0 
      8192k: 159.0 161.4 159.0 163.1 159.0 163.6 294.2 564.3 
     16384k: 159.5 163.8 159.5 165.5 159.5 165.3 297.0 570.8 

Executing ramlat on cpu4 (Cortex-A15), results in ns:

       size:  1x32  2x32  1x64  2x64 1xPTR 2xPTR 4xPTR 8xPTR
         4k: 2.004 2.004 2.130 2.129 2.004 2.004 2.137 4.014 
         8k: 2.004 2.004 2.130 2.130 2.004 2.005 2.298 4.009 
        16k: 4.931 4.293 4.941 4.440 4.917 4.367 8.101 20.36 
        32k: 10.69 10.95 10.57 10.84 10.68 11.49 16.50 28.77 
        64k: 10.86 10.88 10.85 10.80 10.86 12.94 23.82 46.10 
       128k: 11.28 11.27 11.31 11.31 11.27 13.65 24.00 50.48 
       256k: 14.90 15.09 14.98 15.19 14.88 15.96 24.29 48.76 
       512k: 15.35 15.50 15.40 15.58 15.78 16.32 24.58 50.44 
      1024k: 15.84 15.84 15.76 15.91 15.66 16.52 25.86 48.81 
      2048k: 52.96 49.98 51.60 49.84 51.89 51.02 58.10 86.62 
      4096k: 145.9 134.9 145.9 134.9 147.8 141.3 131.5 173.4 
      8192k: 171.4 169.5 171.6 169.6 171.6 169.1 166.8 198.9 
     16384k: 174.8 175.4 174.8 175.4 174.8 175.6 175.3 202.8 

##########################################################################

Executing benchmark on each cluster individually

OpenSSL 1.1.1f, built on 31 Mar 2020
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes
aes-256-cbc      20446.77k    25319.72k    26717.87k    27091.29k    27202.90k    27148.29k (Cortex-A7)
aes-256-cbc      58473.23k    66768.11k    70337.28k    71281.66k    71516.16k    71538.01k (Cortex-A15)

##########################################################################

Executing benchmark single-threaded on cpu0 (Cortex-A7)

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,8 CPUs LE)

LE
CPU Freq: 21333333 64000000 21333333 32000000 64000000 128000000 170666666 341333333 1024000000

RAM size:    1990 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:        719    99    704    700  |      13048   100   1119   1114
23:        675    99    692    688  |      12835   100   1116   1111
24:        654    99    708    704  |      12598   100   1111   1106
25:        630    99    725    720  |      12321   100   1102   1097
----------------------------------  | ------------------------------
Avr:              99    707    703  |              100   1112   1107
Tot:              99    910    905

Executing benchmark single-threaded on cpu4 (Cortex-A15)

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,8 CPUs LE)

LE
CPU Freq: 32000000 64000000 64000000 64000000 128000000 256000000 512000000 1024000000 2048000000

RAM size:    1990 MB,  # CPU hardware threads:   8
RAM usage:    435 MB,  # Benchmark threads:      1

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       1516   100   1480   1475  |      23453   100   2008   2002
23:       1414   100   1446   1441  |      23016   100   1998   1992
24:       1363   100   1471   1466  |      22389   100   1971   1966
25:       1314   100   1506   1501  |      21931   100   1957   1952
----------------------------------  | ------------------------------
Avr:             100   1476   1471  |              100   1983   1978
Tot:             100   1730   1724

##########################################################################

Executing benchmark 3 times multi-threaded on CPUs 0-7

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,8 CPUs LE)

LE
CPU Freq: 32000000 64000000 64000000 64000000 128000000 128000000 512000000 512000000 2048000000

RAM size:    1990 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7500   748    976   7297  |     118275   679   1485  10088
23:       6562   712    939   6687  |     114562   685   1448   9914
24:       6561   760    928   7055  |     111639   691   1419   9798
25:       6360   767    947   7262  |     108114   689   1396   9622
----------------------------------  | ------------------------------
Avr:             747    947   7075  |              686   1437   9856
Tot:             716   1192   8465

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,8 CPUs LE)

LE
CPU Freq: 32000000 64000000 64000000 64000000 64000000 256000000 512000000 1024000000 1024000000

RAM size:    1990 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7196   746    939   7001  |     114259   693   1406   9746
23:       6579   720    931   6704  |     111931   695   1394   9686
24:       6339   730    933   6816  |     110428   689   1407   9692
25:       6339   770    940   7238  |     107339   694   1376   9553
----------------------------------  | ------------------------------
Avr:             742    936   6940  |              693   1396   9669
Tot:             717   1166   8304

7-Zip (a) [32] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=C,Utf16=off,HugeFiles=on,32 bits,8 CPUs LE)

LE
CPU Freq: 64000000 64000000 64000000 64000000 64000000 128000000 512000000 1024000000 2048000000

RAM size:    1990 MB,  # CPU hardware threads:   8
RAM usage:   1765 MB,  # Benchmark threads:      8

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       7023   731    935   6832  |     113559   694   1396   9686
23:       6544   735    908   6668  |     111696   694   1394   9666
24:       6194   723    922   6661  |     109734   690   1395   9631
25:       6226   757    940   7109  |     106875   690   1378   9511
----------------------------------  | ------------------------------
Avr:             736    926   6818  |              692   1391   9624
Tot:             714   1158   8221

Compression: 7075,6940,6818
Decompression: 9856,9669,9624
Total: 8465,8304,8221

##########################################################################

** cpuminer-multi 1.3.7 by tpruvot@github **
BTC donation address: 1FhDPLPpw18X4srecguG3MxJYe4a1JsZnd (tpruvot)

[2023-03-01 17:39:39] 8 miner threads started, using 'scrypt' algorithm.
[2023-03-01 17:39:39] CPU #4: 1.48 kH/s
[2023-03-01 17:39:39] CPU #5: 1.44 kH/s
[2023-03-01 17:39:39] CPU #6: 1.43 kH/s
[2023-03-01 17:39:39] CPU #7: 1.47 kH/s
[2023-03-01 17:39:39] CPU #1: 0.63 kH/s
[2023-03-01 17:39:39] CPU #0: 0.62 kH/s
[2023-03-01 17:39:39] CPU #2: 0.63 kH/s
[2023-03-01 17:39:39] CPU #3: 0.63 kH/s
[2023-03-01 17:39:45] CPU #5: 1.30 kH/s
[2023-03-01 17:39:45] CPU #7: 1.32 kH/s
[2023-03-01 17:39:45] Total: 7.95 kH/s
[2023-03-01 17:39:45] CPU #4: 1.27 kH/s
[2023-03-01 17:39:49] Total: 7.78 kH/s
[2023-03-01 17:39:49] CPU #0: 0.65 kH/s
[2023-03-01 17:39:49] CPU #1: 0.65 kH/s
[2023-03-01 17:39:49] CPU #2: 0.65 kH/s
[2023-03-01 17:39:49] CPU #3: 0.65 kH/s
[2023-03-01 17:39:49] CPU #6: 1.33 kH/s
[2023-03-01 17:39:54] CPU #7: 1.33 kH/s
[2023-03-01 17:39:54] Total: 7.90 kH/s
[2023-03-01 17:39:54] CPU #4: 1.33 kH/s
[2023-03-01 17:39:54] CPU #5: 1.33 kH/s
[2023-03-01 17:39:59] Total: 7.89 kH/s
[2023-03-01 17:39:59] CPU #0: 0.65 kH/s
[2023-03-01 17:39:59] CPU #1: 0.65 kH/s
[2023-03-01 17:39:59] CPU #2: 0.65 kH/s
[2023-03-01 17:39:59] CPU #3: 0.65 kH/s
[2023-03-01 17:39:59] CPU #6: 1.32 kH/s
[2023-03-01 17:40:04] CPU #7: 1.32 kH/s
[2023-03-01 17:40:04] Total: 7.89 kH/s
[2023-03-01 17:40:04] CPU #4: 1.32 kH/s
[2023-03-01 17:40:04] CPU #5: 1.33 kH/s
[2023-03-01 17:40:09] Total: 7.89 kH/s
[2023-03-01 17:40:09] CPU #0: 0.65 kH/s
[2023-03-01 17:40:09] CPU #1: 0.65 kH/s
[2023-03-01 17:40:09] CPU #2: 0.65 kH/s
[2023-03-01 17:40:09] CPU #3: 0.65 kH/s
[2023-03-01 17:40:09] CPU #6: 1.32 kH/s
[2023-03-01 17:40:14] CPU #7: 1.32 kH/s
[2023-03-01 17:40:14] Total: 7.87 kH/s
[2023-03-01 17:40:14] CPU #4: 1.32 kH/s
[2023-03-01 17:40:14] CPU #5: 1.32 kH/s
[2023-03-01 17:40:19] Total: 7.87 kH/s
[2023-03-01 17:40:19] CPU #0: 0.65 kH/s
[2023-03-01 17:40:19] CPU #1: 0.65 kH/s
[2023-03-01 17:40:19] CPU #2: 0.65 kH/s
[2023-03-01 17:40:19] CPU #3: 0.65 kH/s
[2023-03-01 17:40:19] CPU #6: 1.32 kH/s
[2023-03-01 17:40:24] CPU #7: 1.31 kH/s
[2023-03-01 17:40:24] Total: 7.85 kH/s
[2023-03-01 17:40:24] CPU #4: 1.31 kH/s
[2023-03-01 17:40:24] CPU #5: 1.31 kH/s
[2023-03-01 17:40:29] Total: 7.84 kH/s
[2023-03-01 17:40:29] CPU #0: 0.65 kH/s
[2023-03-01 17:40:29] CPU #2: 0.64 kH/s
[2023-03-01 17:40:29] CPU #1: 0.65 kH/s
[2023-03-01 17:40:29] CPU #3: 0.65 kH/s
[2023-03-01 17:40:29] CPU #6: 1.31 kH/s
[2023-03-01 17:40:34] CPU #7: 1.31 kH/s
[2023-03-01 17:40:34] Total: 7.82 kH/s
[2023-03-01 17:40:34] CPU #4: 1.31 kH/s
[2023-03-01 17:40:34] CPU #5: 1.31 kH/s
[2023-03-01 17:40:39] Total: 7.84 kH/s
[2023-03-01 17:40:39] CPU #0: 0.65 kH/s
[2023-03-01 17:40:39] CPU #2: 0.65 kH/s
[2023-03-01 17:40:39] CPU #1: 0.65 kH/s
[2023-03-01 17:40:39] CPU #3: 0.65 kH/s
[2023-03-01 17:40:39] CPU #6: 1.31 kH/s
[2023-03-01 17:40:44] CPU #7: 1.31 kH/s
[2023-03-01 17:40:44] Total: 7.83 kH/s
[2023-03-01 17:40:44] CPU #4: 1.31 kH/s
[2023-03-01 17:40:44] CPU #5: 1.31 kH/s
[2023-03-01 17:40:49] Total: 7.83 kH/s
[2023-03-01 17:40:49] CPU #0: 0.65 kH/s
[2023-03-01 17:40:49] CPU #2: 0.65 kH/s
[2023-03-01 17:40:49] CPU #1: 0.65 kH/s
[2023-03-01 17:40:49] CPU #3: 0.65 kH/s
[2023-03-01 17:40:49] CPU #6: 1.31 kH/s
[2023-03-01 17:40:54] CPU #7: 1.31 kH/s
[2023-03-01 17:40:54] Total: 7.83 kH/s
[2023-03-01 17:40:54] CPU #4: 1.31 kH/s
[2023-03-01 17:40:54] CPU #5: 1.31 kH/s
[2023-03-01 17:40:59] Total: 7.82 kH/s
[2023-03-01 17:40:59] CPU #2: 0.65 kH/s
[2023-03-01 17:40:59] CPU #0: 0.65 kH/s
[2023-03-01 17:40:59] CPU #1: 0.65 kH/s
[2023-03-01 17:40:59] CPU #3: 0.65 kH/s
[2023-03-01 17:40:59] CPU #6: 1.30 kH/s
[2023-03-01 17:41:00] CPU #5: 1.30 kH/s
[2023-03-01 17:41:04] CPU #7: 1.30 kH/s
[2023-03-01 17:41:04] Total: 7.81 kH/s
[2023-03-01 17:41:04] CPU #4: 1.31 kH/s
[2023-03-01 17:41:08] CPU #5: 1.30 kH/s
[2023-03-01 17:41:09] Total: 7.81 kH/s
[2023-03-01 17:41:09] CPU #2: 0.64 kH/s
[2023-03-01 17:41:09] CPU #0: 0.65 kH/s
[2023-03-01 17:41:09] CPU #1: 0.65 kH/s
[2023-03-01 17:41:09] CPU #3: 0.65 kH/s
[2023-03-01 17:41:09] CPU #6: 1.30 kH/s
[2023-03-01 17:41:14] CPU #7: 1.30 kH/s
[2023-03-01 17:41:14] Total: 7.78 kH/s
[2023-03-01 17:41:14] CPU #4: 1.30 kH/s
[2023-03-01 17:41:14] CPU #5: 1.30 kH/s
[2023-03-01 17:41:19] Total: 7.81 kH/s
[2023-03-01 17:41:19] CPU #2: 0.65 kH/s
[2023-03-01 17:41:19] CPU #0: 0.65 kH/s
[2023-03-01 17:41:19] CPU #1: 0.65 kH/s
[2023-03-01 17:41:19] CPU #3: 0.65 kH/s
[2023-03-01 17:41:19] CPU #6: 1.30 kH/s
[2023-03-01 17:41:24] CPU #7: 1.30 kH/s
[2023-03-01 17:41:24] Total: 7.81 kH/s
[2023-03-01 17:41:24] CPU #4: 1.30 kH/s
[2023-03-01 17:41:24] CPU #5: 1.30 kH/s
[2023-03-01 17:41:29] Total: 7.80 kH/s
[2023-03-01 17:41:29] CPU #2: 0.65 kH/s
[2023-03-01 17:41:29] CPU #0: 0.65 kH/s
[2023-03-01 17:41:29] CPU #1: 0.65 kH/s
[2023-03-01 17:41:29] CPU #3: 0.65 kH/s
[2023-03-01 17:41:29] CPU #6: 1.30 kH/s
[2023-03-01 17:41:34] CPU #7: 1.30 kH/s
[2023-03-01 17:41:34] Total: 7.80 kH/s
[2023-03-01 17:41:34] CPU #4: 1.30 kH/s
[2023-03-01 17:41:34] CPU #5: 1.30 kH/s
[2023-03-01 17:41:39] Total: 7.80 kH/s
[2023-03-01 17:41:39] CPU #2: 0.65 kH/s
[2023-03-01 17:41:39] CPU #0: 0.65 kH/s
[2023-03-01 17:41:39] CPU #1: 0.65 kH/s
[2023-03-01 17:41:39] CPU #3: 0.65 kH/s
[2023-03-01 17:41:39] CPU #6: 1.30 kH/s
[2023-03-01 17:41:40] CPU #5: 1.30 kH/s
[2023-03-01 17:41:44] CPU #7: 1.30 kH/s
[2023-03-01 17:41:44] Total: 7.79 kH/s
[2023-03-01 17:41:44] CPU #4: 1.30 kH/s
[2023-03-01 17:41:49] Total: 7.80 kH/s
[2023-03-01 17:41:49] CPU #2: 0.65 kH/s
[2023-03-01 17:41:49] CPU #0: 0.65 kH/s
[2023-03-01 17:41:49] CPU #1: 0.65 kH/s
[2023-03-01 17:41:49] CPU #3: 0.65 kH/s
[2023-03-01 17:41:49] CPU #6: 1.30 kH/s
[2023-03-01 17:41:50] CPU #5: 1.30 kH/s
[2023-03-01 17:41:54] CPU #7: 1.30 kH/s
[2023-03-01 17:41:54] Total: 7.78 kH/s
[2023-03-01 17:41:54] CPU #4: 1.28 kH/s
[2023-03-01 17:41:59] CPU #5: 1.30 kH/s
[2023-03-01 17:41:59] Total: 7.76 kH/s
[2023-03-01 17:41:59] CPU #2: 0.65 kH/s
[2023-03-01 17:41:59] CPU #0: 0.65 kH/s
[2023-03-01 17:41:59] CPU #1: 0.65 kH/s
[2023-03-01 17:41:59] CPU #3: 0.65 kH/s
[2023-03-01 17:41:59] CPU #6: 1.30 kH/s
[2023-03-01 17:42:04] CPU #7: 1.30 kH/s
[2023-03-01 17:42:04] Total: 7.79 kH/s
[2023-03-01 17:42:04] CPU #4: 1.30 kH/s
[2023-03-01 17:42:09] CPU #5: 1.29 kH/s
[2023-03-01 17:42:09] Total: 7.78 kH/s
[2023-03-01 17:42:09] CPU #2: 0.65 kH/s
[2023-03-01 17:42:09] CPU #0: 0.65 kH/s
[2023-03-01 17:42:09] CPU #1: 0.65 kH/s
[2023-03-01 17:42:09] CPU #3: 0.65 kH/s
[2023-03-01 17:42:09] CPU #6: 1.30 kH/s
[2023-03-01 17:42:14] CPU #7: 1.29 kH/s
[2023-03-01 17:42:14] Total: 7.77 kH/s
[2023-03-01 17:42:14] CPU #4: 1.29 kH/s
[2023-03-01 17:42:19] CPU #5: 1.30 kH/s
[2023-03-01 17:42:19] Total: 7.77 kH/s
[2023-03-01 17:42:19] CPU #2: 0.65 kH/s
[2023-03-01 17:42:19] CPU #0: 0.65 kH/s
[2023-03-01 17:42:19] CPU #1: 0.65 kH/s
[2023-03-01 17:42:19] CPU #3: 0.65 kH/s
[2023-03-01 17:42:19] CPU #6: 1.30 kH/s
[2023-03-01 17:42:24] CPU #7: 1.30 kH/s
[2023-03-01 17:42:24] Total: 7.79 kH/s
[2023-03-01 17:42:24] CPU #4: 1.30 kH/s
[2023-03-01 17:42:29] CPU #5: 1.29 kH/s
[2023-03-01 17:42:29] Total: 7.78 kH/s
[2023-03-01 17:42:29] CPU #2: 0.65 kH/s
[2023-03-01 17:42:29] CPU #0: 0.65 kH/s
[2023-03-01 17:42:29] CPU #1: 0.65 kH/s
[2023-03-01 17:42:29] CPU #3: 0.65 kH/s
[2023-03-01 17:42:29] CPU #6: 1.30 kH/s
[2023-03-01 17:42:34] CPU #7: 1.29 kH/s
[2023-03-01 17:42:34] Total: 7.77 kH/s
[2023-03-01 17:42:34] CPU #4: 1.27 kH/s
[2023-03-01 17:42:39] CPU #5: 1.30 kH/s
[2023-03-01 17:42:39] Total: 7.75 kH/s
[2023-03-01 17:42:39] CPU #2: 0.65 kH/s
[2023-03-01 17:42:39] CPU #0: 0.65 kH/s
[2023-03-01 17:42:39] CPU #1: 0.65 kH/s
[2023-03-01 17:42:39] CPU #3: 0.65 kH/s
[2023-03-01 17:42:39] CPU #6: 1.29 kH/s
[2023-03-01 17:42:44] CPU #7: 1.29 kH/s
[2023-03-01 17:42:44] Total: 7.77 kH/s
[2023-03-01 17:42:44] CPU #4: 1.30 kH/s
[2023-03-01 17:42:49] CPU #5: 1.29 kH/s
[2023-03-01 17:42:49] Total: 7.77 kH/s
[2023-03-01 17:42:49] CPU #2: 0.65 kH/s
[2023-03-01 17:42:49] CPU #0: 0.65 kH/s
[2023-03-01 17:42:49] CPU #1: 0.65 kH/s
[2023-03-01 17:42:49] CPU #3: 0.65 kH/s
[2023-03-01 17:42:49] CPU #6: 1.29 kH/s
[2023-03-01 17:42:54] CPU #7: 1.29 kH/s
[2023-03-01 17:42:54] Total: 7.76 kH/s
[2023-03-01 17:42:54] CPU #4: 1.29 kH/s
[2023-03-01 17:42:59] CPU #5: 1.30 kH/s
[2023-03-01 17:42:59] Total: 7.77 kH/s
[2023-03-01 17:42:59] CPU #2: 0.65 kH/s
[2023-03-01 17:42:59] CPU #0: 0.65 kH/s
[2023-03-01 17:42:59] CPU #1: 0.65 kH/s
[2023-03-01 17:42:59] CPU #3: 0.65 kH/s
[2023-03-01 17:42:59] CPU #6: 1.29 kH/s
[2023-03-01 17:43:04] CPU #7: 1.29 kH/s
[2023-03-01 17:43:04] Total: 7.76 kH/s
[2023-03-01 17:43:04] CPU #4: 1.29 kH/s
[2023-03-01 17:43:09] CPU #5: 1.29 kH/s
[2023-03-01 17:43:09] Total: 7.76 kH/s
[2023-03-01 17:43:09] CPU #2: 0.65 kH/s
[2023-03-01 17:43:09] CPU #0: 0.65 kH/s
[2023-03-01 17:43:09] CPU #1: 0.65 kH/s
[2023-03-01 17:43:09] CPU #3: 0.65 kH/s
[2023-03-01 17:43:09] CPU #6: 1.29 kH/s
[2023-03-01 17:43:14] CPU #7: 1.29 kH/s
[2023-03-01 17:43:14] Total: 7.76 kH/s
[2023-03-01 17:43:14] CPU #4: 1.28 kH/s
[2023-03-01 17:43:19] CPU #5: 1.29 kH/s
[2023-03-01 17:43:19] Total: 7.74 kH/s
[2023-03-01 17:43:19] CPU #2: 0.65 kH/s
[2023-03-01 17:43:19] CPU #0: 0.65 kH/s
[2023-03-01 17:43:19] CPU #1: 0.65 kH/s
[2023-03-01 17:43:19] CPU #3: 0.65 kH/s
[2023-03-01 17:43:19] CPU #6: 1.29 kH/s
[2023-03-01 17:43:24] CPU #7: 1.29 kH/s
[2023-03-01 17:43:24] Total: 7.76 kH/s
[2023-03-01 17:43:24] CPU #4: 1.30 kH/s
[2023-03-01 17:43:29] CPU #5: 1.29 kH/s
[2023-03-01 17:43:29] Total: 7.76 kH/s
[2023-03-01 17:43:29] CPU #2: 0.65 kH/s
[2023-03-01 17:43:29] CPU #0: 0.65 kH/s
[2023-03-01 17:43:29] CPU #1: 0.65 kH/s
[2023-03-01 17:43:29] CPU #3: 0.65 kH/s
[2023-03-01 17:43:29] CPU #6: 1.29 kH/s
[2023-03-01 17:43:34] CPU #7: 1.29 kH/s
[2023-03-01 17:43:34] Total: 7.75 kH/s
[2023-03-01 17:43:34] CPU #4: 1.29 kH/s
[2023-03-01 17:43:39] CPU #5: 1.29 kH/s
[2023-03-01 17:43:39] Total: 7.75 kH/s
[2023-03-01 17:43:39] CPU #2: 0.65 kH/s
[2023-03-01 17:43:39] CPU #0: 0.65 kH/s
[2023-03-01 17:43:39] CPU #1: 0.65 kH/s
[2023-03-01 17:43:39] CPU #3: 0.65 kH/s
[2023-03-01 17:43:39] CPU #6: 1.29 kH/s
[2023-03-01 17:43:44] CPU #7: 1.29 kH/s
[2023-03-01 17:43:44] Total: 7.76 kH/s
[2023-03-01 17:43:44] CPU #4: 1.29 kH/s
[2023-03-01 17:43:49] CPU #5: 1.29 kH/s
[2023-03-01 17:43:49] Total: 7.76 kH/s
[2023-03-01 17:43:49] CPU #2: 0.65 kH/s
[2023-03-01 17:43:49] CPU #0: 0.65 kH/s
[2023-03-01 17:43:49] CPU #1: 0.65 kH/s
[2023-03-01 17:43:49] CPU #3: 0.65 kH/s
[2023-03-01 17:43:49] CPU #6: 1.29 kH/s
[2023-03-01 17:43:54] CPU #7: 1.29 kH/s
[2023-03-01 17:43:54] Total: 7.76 kH/s
[2023-03-01 17:43:54] CPU #4: 1.29 kH/s
[2023-03-01 17:43:59] CPU #5: 1.29 kH/s
[2023-03-01 17:43:59] Total: 7.75 kH/s
[2023-03-01 17:43:59] CPU #2: 0.65 kH/s
[2023-03-01 17:43:59] CPU #0: 0.65 kH/s
[2023-03-01 17:43:59] CPU #1: 0.65 kH/s
[2023-03-01 17:43:59] CPU #3: 0.65 kH/s
[2023-03-01 17:43:59] CPU #6: 1.29 kH/s
[2023-03-01 17:44:04] CPU #7: 1.29 kH/s
[2023-03-01 17:44:04] Total: 7.72 kH/s
[2023-03-01 17:44:04] CPU #4: 1.29 kH/s
[2023-03-01 17:44:09] CPU #5: 1.29 kH/s
[2023-03-01 17:44:09] Total: 7.75 kH/s
[2023-03-01 17:44:09] CPU #2: 0.65 kH/s
[2023-03-01 17:44:09] CPU #0: 0.65 kH/s
[2023-03-01 17:44:09] CPU #1: 0.65 kH/s
[2023-03-01 17:44:09] CPU #3: 0.65 kH/s
[2023-03-01 17:44:09] CPU #6: 1.29 kH/s
[2023-03-01 17:44:14] CPU #7: 1.28 kH/s
[2023-03-01 17:44:14] Total: 7.73 kH/s
[2023-03-01 17:44:14] CPU #4: 1.28 kH/s
[2023-03-01 17:44:18] CPU #5: 1.29 kH/s
[2023-03-01 17:44:19] Total: 7.75 kH/s
[2023-03-01 17:44:19] CPU #2: 0.65 kH/s
[2023-03-01 17:44:19] CPU #0: 0.65 kH/s
[2023-03-01 17:44:19] CPU #1: 0.65 kH/s
[2023-03-01 17:44:19] CPU #3: 0.65 kH/s
[2023-03-01 17:44:19] CPU #6: 1.29 kH/s
[2023-03-01 17:44:24] CPU #7: 1.29 kH/s
[2023-03-01 17:44:24] Total: 7.75 kH/s
[2023-03-01 17:44:24] CPU #4: 1.29 kH/s
[2023-03-01 17:44:24] CPU #5: 1.28 kH/s
[2023-03-01 17:44:29] Total: 7.73 kH/s
[2023-03-01 17:44:29] CPU #2: 0.65 kH/s
[2023-03-01 17:44:29] CPU #0: 0.65 kH/s
[2023-03-01 17:44:29] CPU #1: 0.65 kH/s
[2023-03-01 17:44:29] CPU #3: 0.65 kH/s
[2023-03-01 17:44:29] CPU #6: 1.28 kH/s
[2023-03-01 17:44:34] CPU #7: 1.29 kH/s
[2023-03-01 17:44:34] Total: 7.73 kH/s
[2023-03-01 17:44:34] CPU #4: 1.29 kH/s
[2023-03-01 17:44:34] CPU #5: 1.29 kH/s

Total Scores: 7.90,7.89,7.87,7.85,7.84,7.83,7.82,7.81,7.80,7.79,7.78,7.77,7.76,7.75,7.74,7.73,7.72

##########################################################################

Testing maximum cpufreq again, still under full load. System health now:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
17:44:38: 1500/1400MHz  8.04 100%   0%  99%   0%   0%   0%  81.0Â°C

Checking cpufreq OPP for cpu0-cpu3 (Cortex-A7):

Cpufreq OPP: 1400    Measured: 1396 (1396.755/1396.725/1396.519)

Checking cpufreq OPP for cpu4-cpu7 (Cortex-A15):

Cpufreq OPP: 2000    Measured: 1996 (1996.386/1996.145/1995.952)

##########################################################################

DRAM clock transitions since last boot (1450270 ms ago):

/sys/devices/platform/soc/10c20000.memory-controller/devfreq/10c20000.memory-controller:

     From  :   To
           : 165000000 206000000 275000000 413000000 543000000 633000000 728000000 825000000   time(ms)
  165000000:         0         1         3         7         3         0         0        21    106120
  206000000:         1         0         2         2         2         0         0         3      1870
  275000000:         3         2         0         3         1         0         0         6      8620
  413000000:         8         4         1         0         3         0         0         6     10470
  543000000:         2         1         2         4         0         0         0        12      5080
  633000000:         0         0         0         0         0         0         0         0         0
  728000000:         0         0         0         0         0         0         0         0         0
* 825000000:        21         2         7         6        12         0         0         0   1313350
Total transition : 151

##########################################################################

Thermal source: /sys/devices/virtual/thermal/thermal_zone0/ (cpu0-thermal)

System health while running tinymembench:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
17:25:25: 2000/1400MHz  0.93  10%   4%   4%   0%   1%   0%  31.0Â°C
17:25:45: 2000/1400MHz  0.95  12%   0%  12%   0%   0%   0%  30.0Â°C
17:26:05: 2000/1400MHz  0.96  12%   0%  12%   0%   0%   0%  32.0Â°C
17:26:25: 2000/1400MHz  0.97  12%   0%  12%   0%   0%   0%  32.0Â°C
17:26:46: 2000/1400MHz  0.98  12%   0%  12%   0%   0%   0%  33.0Â°C
17:27:06: 2000/1400MHz  0.99  12%   0%  12%   0%   0%   0%  41.0Â°C
17:27:26: 2000/1400MHz  0.99  12%   0%  12%   0%   0%   0%  49.0Â°C
17:27:46: 2000/1400MHz  1.00  12%   0%  12%   0%   0%   0%  49.0Â°C
17:28:06: 2000/1400MHz  1.00  12%   0%  12%   0%   0%   0%  51.0Â°C
17:28:26: 2000/1400MHz  1.00  12%   0%  12%   0%   0%   0%  48.0Â°C

System health while running ramlat:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
17:28:43: 2000/1400MHz  1.08  11%   2%   7%   0%   0%   0%  43.0Â°C
17:28:49: 2000/1400MHz  1.07  12%   0%  12%   0%   0%   0%  36.0Â°C
17:28:55: 2000/1400MHz  1.07  12%   0%  12%   0%   0%   0%  35.0Â°C
17:29:01: 2000/1400MHz  1.06  12%   0%  12%   0%   0%   0%  36.0Â°C
17:29:07: 2000/1400MHz  1.06  12%   0%  12%   0%   0%   0%  36.0Â°C
17:29:14: 2000/1400MHz  1.05  12%   0%  12%   0%   0%   0%  44.0Â°C
17:29:20: 2000/1400MHz  1.04  12%   0%  12%   0%   0%   0%  44.0Â°C
17:29:26: 2000/1400MHz  1.04  12%   0%  12%   0%   0%   0%  43.0Â°C
17:29:32: 2000/1400MHz  1.04  12%   0%  12%   0%   0%   0%  42.0Â°C
17:29:38: 2000/1400MHz  1.03  12%   0%  12%   0%   0%   0%  42.0Â°C

System health while running OpenSSL benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
17:29:39: 2000/1400MHz  1.03  11%   2%   8%   0%   0%   0%  41.0Â°C
17:29:56: 2000/1400MHz  1.02  12%   0%  12%   0%   0%   0%  34.0Â°C
17:30:12: 2000/1400MHz  1.02  12%   0%  12%   0%   0%   0%  55.0Â°C

System health while running 7-zip single core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
17:30:16: 2000/1400MHz  1.02  11%   2%   8%   0%   0%   0%  43.0Â°C
17:30:29: 2000/1400MHz  1.01  12%   0%  12%   0%   0%   0%  35.0Â°C
17:30:42: 2000/1400MHz  1.01  12%   0%  12%   0%   0%   0%  34.0Â°C
17:30:55: 2000/1400MHz  1.01  12%   0%  12%   0%   0%   0%  34.0Â°C
17:31:08: 2000/1400MHz  1.00  12%   0%  12%   0%   0%   0%  34.0Â°C
17:31:21: 2000/1400MHz  1.07  12%   0%  12%   0%   0%   0%  35.0Â°C
17:31:34: 2000/1400MHz  1.06  12%   0%  12%   0%   0%   0%  35.0Â°C
17:31:47: 2000/1400MHz  1.05  12%   0%  12%   0%   0%   0%  34.0Â°C
17:32:00: 2000/1400MHz  1.04  12%   0%  12%   0%   0%   0%  35.0Â°C
17:32:13: 2000/1400MHz  1.03  12%   0%  11%   0%   0%   0%  35.0Â°C
17:32:26: 2000/1400MHz  1.02  12%   0%  12%   0%   0%   0%  35.0Â°C
17:32:39: 2000/1400MHz  1.02  12%   0%  12%   0%   0%   0%  36.0Â°C
17:32:53: 2000/1400MHz  1.01  12%   0%  12%   0%   0%   0%  35.0Â°C
17:33:06: 2000/1400MHz  1.01  12%   0%  12%   0%   0%   0%  43.0Â°C
17:33:19: 2000/1400MHz  1.01  12%   0%  12%   0%   0%   0%  53.0Â°C
17:33:32: 2000/1400MHz  1.01  12%   0%  12%   0%   0%   0%  54.0Â°C
17:33:45: 2000/1400MHz  1.00  12%   0%  12%   0%   0%   0%  53.0Â°C
17:33:58: 2000/1400MHz  1.00  12%   0%  12%   0%   0%   0%  55.0Â°C
17:34:11: 2000/1400MHz  1.00  12%   0%  11%   0%   0%   0%  54.0Â°C
17:34:24: 2000/1400MHz  1.00  12%   0%  11%   0%   0%   0%  55.0Â°C

System health while running 7-zip multi core benchmark:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
17:34:32: 2000/1400MHz  1.00  12%   1%   9%   0%   0%   0%  49.0Â°C
17:34:44: 1800/1400MHz  1.48  83%   2%  81%   0%   0%   0%  75.0Â°C
17:34:55: 1900/1400MHz  2.67  79%   0%  78%   0%   0%   0%  74.0Â°C
17:35:08: 1700/1400MHz  3.64  95%   2%  93%   0%   0%   0%  75.0Â°C
17:35:19: 1800/1400MHz  3.91  76%   2%  73%   0%   0%   0%  74.0Â°C
17:35:31: 1700/1400MHz  4.88  98%   2%  94%   0%   0%   0%  76.0Â°C
17:35:42: 1700/1400MHz  4.80  69%   2%  65%   0%   0%   0%  76.0Â°C
17:35:53: 1700/1400MHz  5.60  98%   4%  93%   0%   0%   0%  74.0Â°C
17:36:05: 1700/1400MHz  5.97  97%   3%  93%   0%   0%   0%  75.0Â°C
17:36:16: 1800/1400MHz  5.93  68%   0%  67%   0%   0%   0%  75.0Â°C
17:36:28: 1700/1400MHz  6.25  96%   1%  94%   0%   0%   0%  75.0Â°C
17:36:39: 1700/1400MHz  6.20  80%   1%  78%   0%   0%   0%  76.0Â°C
17:36:51: 1600/1400MHz  6.73  96%   1%  94%   0%   0%   0%  75.0Â°C
17:37:02: 1700/1400MHz  6.79  76%   2%  73%   0%   0%   0%  74.0Â°C
17:37:14: 1700/1400MHz  7.05  94%   2%  91%   0%   0%   0%  76.0Â°C
17:37:25: 1700/1400MHz  7.20  68%   3%  64%   0%   0%   0%  74.0Â°C
17:37:36: 1700/1400MHz  7.62  99%   4%  93%   0%   0%   0%  75.0Â°C
17:37:48: 1700/1400MHz  7.75  97%   3%  93%   0%   0%   0%  76.0Â°C
17:37:59: 1700/1400MHz  7.66  70%   1%  68%   0%   0%   0%  76.0Â°C
17:38:12: 1700/1400MHz  7.64  95%   0%  93%   0%   0%   0%  76.0Â°C
17:38:22: 1700/1400MHz  7.14  81%   2%  78%   0%   0%   0%  74.0Â°C
17:38:35: 1700/1400MHz  6.75  97%   1%  95%   0%   0%   0%  76.0Â°C
17:38:45: 1600/1400MHz  6.74  74%   3%  70%   0%   0%   0%  75.0Â°C
17:38:58: 1600/1400MHz  6.79  93%   2%  90%   0%   0%   0%  75.0Â°C
17:39:08: 1700/1400MHz  6.41  68%   2%  65%   0%   0%   0%  74.0Â°C
17:39:19: 1600/1400MHz  6.97  98%   3%  94%   0%   0%   0%  73.0Â°C
17:39:31: 1700/1400MHz  7.43  94%   3%  90%   0%   0%   0%  77.0Â°C

System health while running cpuminer:

Time       big.LITTLE   load %cpu %sys %usr %nice %io %irq   Temp
17:39:44: 1600/1400MHz  7.70  32%   1%  29%   0%   0%   0%  80.0Â°C
17:40:26: 1600/1400MHz  7.90 100%   0%  99%   0%   0%   0%  81.0Â°C
17:41:08: 1500/1400MHz  7.95 100%   0%  99%   0%   0%   0%  81.0Â°C
17:41:50: 1500/1400MHz  7.98 100%   0%  99%   0%   0%   0%  80.0Â°C
17:42:32: 1500/1400MHz  8.03 100%   0%  99%   0%   0%   0%  82.0Â°C
17:43:14: 1500/1400MHz  8.01 100%   0%  99%   0%   0%   0%  80.0Â°C
17:43:56: 1600/1400MHz  8.01 100%   0%  99%   0%   0%   0%  80.0Â°C
17:44:38: 1500/1400MHz  8.04 100%   0%  99%   0%   0%   0%  81.0Â°C

##########################################################################

Throttling statistics (time spent on each cpufreq OPP) for CPUs 4-7 (Cortex-A15):

2000 MHz:  566.62 sec
1900 MHz:   12.96 sec
1800 MHz:   42.65 sec
1700 MHz:  150.90 sec
1600 MHz:  145.28 sec
1500 MHz:  236.16 sec
1400 MHz:       0 sec
1300 MHz:       0 sec
1200 MHz:       0 sec
1100 MHz:       0 sec
1000 MHz:       0 sec
 900 MHz:       0 sec
 800 MHz:       0 sec
 700 MHz:       0 sec
 600 MHz:       0 sec
 500 MHz:       0 sec
 400 MHz:       0 sec
 300 MHz:       0 sec
 200 MHz:       0 sec

##########################################################################

Linux 5.4.151-odroidxu4 (odroidxu4) 	03/01/23 	_armv7l_	(8 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          43.71    0.02    1.94    0.22    0.00   54.10

Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd
mmcblk1           6.18       107.64        20.68      9126.26     156109      29988   13236276
sda               0.17         3.85         0.00         0.00       5580          0          0
zram0             0.39         1.57         0.00         0.00       2272          4          0
zram1             0.77         0.33         2.75         0.00        472       3984          0

              total        used        free      shared  buff/cache   available
Mem:          1.9Gi       135Mi       1.7Gi       4.0Mi        74Mi       1.7Gi
Swap:         995Mi          0B       995Mi

Filename				Type		Size	Used	Priority
/dev/zram0                             	partition	1019112	0	5

CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                 cpufreq   min    max
 CPU    cluster  policy   speed  speed   core type
  0        1        0      200    1400   Cortex-A7 / r0p3
  1        1        0      200    1400   Cortex-A7 / r0p3
  2        1        0      200    1400   Cortex-A7 / r0p3
  3        1        0      200    1400   Cortex-A7 / r0p3
  4        0        4      200    2000   Cortex-A15 / r2p3
  5        0        4      200    2000   Cortex-A15 / r2p3
  6        0        4      200    2000   Cortex-A15 / r2p3
  7        0        4      200    2000   Cortex-A15 / r2p3

Architecture:        armv7l
Byte Order:          Little Endian
CPU(s):              8
On-line CPU(s) list: 0-7
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           2
Vendor ID:           ARM
Model:               3
Model name:          Cortex-A7
Stepping:            r0p3
CPU max MHz:         2000.0000
CPU min MHz:         200.0000
BogoMIPS:            84.00
Flags:               half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm

SoC guess: Exynos 5422
DT compat: hardkernel,odroid-xu4
           samsung,exynos5800
           samsung,exynos5
 Compiler: /usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0 / arm-linux-gnueabihf
 Userland: arm
   Kernel: 5.4.151-odroidxu4/armv7l
           CONFIG_HZ=100
           CONFIG_HZ_100=y
           CONFIG_HZ_FIXED=0
           CONFIG_PREEMPTION=y
           CONFIG_PREEMPT=y
           CONFIG_PREEMPT_COUNT=y
           CONFIG_PREEMPT_RCU=y

##########################################################################

Kernel 5.4.151 is not latest 5.4.233 LTS that was released on 2023-02-25.

See https://endoflife.date/linux for details. It is somewhat likely that
a lot of exploitable vulnerabilities exist for this kernel as well as many
unfixed bugs.

But this version string doesn't matter since this is not an official LTS Linux
from kernel.org. This device runs a Samsung vendor/BSP kernel.

##########################################################################

   opp_table0:
       200 MHz    900.0 mV
       300 MHz    900.0 mV
       400 MHz    900.0 mV
       500 MHz    900.0 mV
       600 MHz    900.0 mV
       700 MHz    900.0 mV
       800 MHz    925.0 mV
       900 MHz    950.0 mV
      1000 MHz    975.0 mV
      1100 MHz   1000.0 mV
      1200 MHz   1050.0 mV
      1300 MHz   1050.0 mV
      1400 MHz   1062.5 mV
      1500 MHz   1087.5 mV
      1600 MHz   1125.0 mV
      1700 MHz   1162.5 mV
      1800 MHz   1200.0 mV
      1900 MHz   1250.0 mV
      2000 MHz   1312.5 mV

   opp_table1:
       200 MHz    900.0 mV
       300 MHz    900.0 mV
       400 MHz    900.0 mV
       500 MHz    900.0 mV
       600 MHz    950.0 mV
       700 MHz    987.5 mV
       800 MHz   1025.0 mV
       900 MHz   1062.5 mV
      1000 MHz   1100.0 mV
      1100 MHz   1137.5 mV
      1200 MHz   1175.0 mV
      1300 MHz   1225.0 mV
      1400 MHz   1275.0 mV

   opp_table2:
       165 MHz    875.0 mV
       206 MHz    875.0 mV
       275 MHz    875.0 mV
       413 MHz    887.5 mV
       543 MHz    937.5 mV
       633 MHz   1012.5 mV
       728 MHz   1037.5 mV
       825 MHz   1050.0 mV

##########################################################################

Results validation:

  * No mismatch between advertised and measured max CPU clockspeed
  * No swapping
  * Background activity (%system) OK
  * Throttling might have occured

Status of performance related governors found below /sys (w/o cpufreq):

  * soc:bus_wcore: performance / 400 MHz (userspace powersave performance simple_ondemand / 84 111 222 333 400)
  * 10c20000.memory-controller: performance / 825 MHz (userspace powersave performance simple_ondemand / 165 206 275 413 543 633 728 825)

Status of performance related policies found below /sys:

  * /sys/devices/platform/soc/11800000.gpu/power_policy: [demand] coarse_demand always_on

##########################################################################

/sys/kernel/debug/clk/clk_summary diff between all governors set to powersave and performance:

                                   enable  prepare  protect                                duty
     clock                          count    count    count        rate   accuracy phase  cycle
  ---------------------------------------------------------------------------------------------
116,142c116,142
<     fout_kpll                         0        0        0   600000000          0     0  50000
<        mout_kpll                      0        0        0   600000000          0     0  50000
<           kfcclk                      0        0        0   600000000          0     0  50000
<           sclk_kpll                   0        0        0   150000000          0     0  50000
<           mout_kfc                    0        0        0   600000000          0     0  50000
<              div_kfc                  0        0        0   600000000          0     0  50000
<     fout_bpll                         2        2        0   165000000          0     0  50000
<        mout_bpll                      2        2        0   165000000          0     0  50000
<           mout_mclk_cdrex             1        1        0   165000000          0     0  50000
<              dout_pclk_core_mem       0        0        0    41250000          0     0  50000
<              dout_sclk_cdrex          1        1        0   165000000          0     0  50000
<                 clkm_phy1             0        0        0   165000000          0     0  50000
<                 clkm_phy0             0        0        0   165000000          0     0  50000
<                 dout_clk2x_phy0       1        1        0   165000000          0     0  50000
<                    dout_aclk_cdrex1       1        1        0    82500000          0     0  50000
<                       aclk_ppmu_drex0_0       0        0        0    82500000          0     0  50000
<                       aclk_ppmu_drex0_1       0        0        0    82500000          0     0  50000
<                       aclk_ppmu_drex1_0       0        0        0    82500000          0     0  50000
<                       aclk_ppmu_drex1_1       0        0        0    82500000          0     0  50000
<                       dout_pclk_cdrex       4        4        0    20625000          0     0  50000
<                          pclk_ppmu_drex0_0       1        1        0    20625000          0     0  50000
<                          pclk_ppmu_drex0_1       1        1        0    20625000          0     0  50000
<                          pclk_ppmu_drex1_0       1        1        0    20625000          0     0  50000
<                          pclk_ppmu_drex1_1       1        1        0    20625000          0     0  50000
<                    dout_cclk_drex0       0        0        0    82500000          0     0  50000
<                       dout_pclk_drex0       0        0        0    20625000          0     0  50000
<                       dout_pclk_drex1       0        0        0    20625000          0     0  50000
---
>     fout_kpll                         0        0        0  1400000000          0     0  50000
>        mout_kpll                      0        0        0  1400000000          0     0  50000
>           kfcclk                      0        0        0  1400000000          0     0  50000
>           sclk_kpll                   0        0        0   350000000          0     0  50000
>           mout_kfc                    0        0        0  1400000000          0     0  50000
>              div_kfc                  0        0        0  1400000000          0     0  50000
>     fout_bpll                         2        2        0   825000000          0     0  50000
>        mout_bpll                      2        2        0   825000000          0     0  50000
>           mout_mclk_cdrex             1        1        0   825000000          0     0  50000
>              dout_pclk_core_mem       0        0        0   206250000          0     0  50000
>              dout_sclk_cdrex          1        1        0   825000000          0     0  50000
>                 clkm_phy1             0        0        0   825000000          0     0  50000
>                 clkm_phy0             0        0        0   825000000          0     0  50000
>                 dout_clk2x_phy0       1        1        0   825000000          0     0  50000
>                    dout_aclk_cdrex1       1        1        0   412500000          0     0  50000
>                       aclk_ppmu_drex0_0       0        0        0   412500000          0     0  50000
>                       aclk_ppmu_drex0_1       0        0        0   412500000          0     0  50000
>                       aclk_ppmu_drex1_0       0        0        0   412500000          0     0  50000
>                       aclk_ppmu_drex1_1       0        0        0   412500000          0     0  50000
>                       dout_pclk_cdrex       4        4        0   103125000          0     0  50000
>                          pclk_ppmu_drex0_0       1        1        0   103125000          0     0  50000
>                          pclk_ppmu_drex0_1       1        1        0   103125000          0     0  50000
>                          pclk_ppmu_drex1_0       1        1        0   103125000          0     0  50000
>                          pclk_ppmu_drex1_1       1        1        0   103125000          0     0  50000
>                    dout_cclk_drex0       0        0        0   412500000          0     0  50000
>                       dout_pclk_drex0       0        0        0   103125000          0     0  50000
>                       dout_pclk_drex1       0        0        0   103125000          0     0  50000
146,152c146,152
<              dout_aclk266_g2d         2        2        0    66500000          0     0  50000
<                 mout_sw_aclk266_g2d       1        1        0    66500000          0     0  50000
<                    mout_user_aclk266_g2d       1        1        0    66500000          0     0  50000
<                       aclk266_g2d       2        3        0    66500000          0     0  50000
<                          mdma0        0        1        0    66500000          0     0  50000
<                          sss          2        2        0    66500000          0     0  50000
<                          smmu_mdma0       0        0        0    66500000          0     0  50000
---
>              dout_aclk266_g2d         2        2        0   266000000          0     0  50000
>                 mout_sw_aclk266_g2d       1        1        0   266000000          0     0  50000
>                    mout_user_aclk266_g2d       1        1        0   266000000          0     0  50000
>                       aclk266_g2d       2        3        0   266000000          0     0  50000
>                          mdma0        0        1        0   266000000          0     0  50000
>                          sss          2        2        0   266000000          0     0  50000
>                          smmu_mdma0       0        0        0   266000000          0     0  50000
154,161c154,161
<              dout_aclk266             1        1        0    88666667          0     0  50000
<                 mout_sw_aclk266       0        0        0    88666667          0     0  50000
<                    mout_user_aclk266       0        0        0    88666667          0     0  50000
<                       mdma1           0        0        0    88666667          0     0  50000
<                       rotator         0        0        0    88666667          0     0  50000
<                       dout_gen_blk       0        0        0    44333334          0     0  50000
<                          smmu_mdma1       0        0        0    44333334          0     0  50000
<                          smmu_rotator       0        0        0    44333334          0     0  50000
---
>              dout_aclk266             1        1        0   266000000          0     0  50000
>                 mout_sw_aclk266       0        0        0   266000000          0     0  50000
>                    mout_user_aclk266       0        0        0   266000000          0     0  50000
>                       mdma1           0        0        0   266000000          0     0  50000
>                       rotator         0        0        0   266000000          0     0  50000
>                       dout_gen_blk       0        0        0   133000000          0     0  50000
>                          smmu_mdma1       0        0        0   133000000          0     0  50000
>                          smmu_rotator       0        0        0   133000000          0     0  50000
163c163
<              dout_aclk400_wcore       1        1        0    76000000          0     0  50000
---
>              dout_aclk400_wcore       1        1        0   266000000          0     0  50000
275,283c275,283
<              dout_aclk300_gscl        2        2        0   150000000          0     0  50000
<                 mout_sw_aclk300_gscl       1        1        0   150000000          0     0  50000
<                    mout_user_aclk300_gscl       1        1        0   150000000          0     0  50000
<                       dout_gscl_blk_300       0        0        0    75000000          0     0  50000
<                          smmu_gscl1       0        0        0    75000000          0     0  50000
<                          smmu_gscl0       0        0        0    75000000          0     0  50000
<                       aclk300_gscl       1        1        0   150000000          0     0  50000
<                          gscl1        0        0        0   150000000          0     0  50000
<                          gscl0        0        0        0   150000000          0     0  50000
---
>              dout_aclk300_gscl        2        2        0   300000000          0     0  50000
>                 mout_sw_aclk300_gscl       1        1        0   300000000          0     0  50000
>                    mout_user_aclk300_gscl       1        1        0   300000000          0     0  50000
>                       dout_gscl_blk_300       0        0        0   150000000          0     0  50000
>                          smmu_gscl1       0        0        0   150000000          0     0  50000
>                          smmu_gscl0       0        0        0   150000000          0     0  50000
>                       aclk300_gscl       1        1        0   300000000          0     0  50000
>                          gscl1        0        0        0   300000000          0     0  50000
>                          gscl0        0        0        0   300000000          0     0  50000
285,289c285,289
<              dout_aclk300_disp1       2        2        0   120000000          0     0  50000
<                 mout_sw_aclk300_disp1       1        1        0   120000000          0     0  50000
<                    mout_user_aclk300_disp1       1        1        0   120000000          0     0  50000
<                       aclk300_disp1       1        1        0   120000000          0     0  50000
<                          fimd1        0        0        0   120000000          0     0  50000
---
>              dout_aclk300_disp1       2        2        0   200000000          0     0  50000
>                 mout_sw_aclk300_disp1       1        1        0   200000000          0     0  50000
>                    mout_user_aclk300_disp1       1        1        0   200000000          0     0  50000
>                       aclk300_disp1       1        1        0   200000000          0     0  50000
>                          fimd1        0        0        0   200000000          0     0  50000
291,296c291,296
<              dout_aclk300_jpeg        1        1        0    75000000          0     0  50000
<                 mout_sw_aclk300_jpeg       0        0        0    75000000          0     0  50000
<                    mout_user_aclk300_jpeg       0        0        0    75000000          0     0  50000
<                       aclk300_jpeg       0        0        0    75000000          0     0  50000
<                          jpeg2        0        0        0    75000000          0     0  50000
<                          jpeg         0        0        0    75000000          0     0  50000
---
>              dout_aclk300_jpeg        1        1        0   300000000          0     0  50000
>                 mout_sw_aclk300_jpeg       0        0        0   300000000          0     0  50000
>                    mout_user_aclk300_jpeg       0        0        0   300000000          0     0  50000
>                       aclk300_jpeg       0        0        0   300000000          0     0  50000
>                          jpeg2        0        0        0   300000000          0     0  50000
>                          jpeg         0        0        0   300000000          0     0  50000
298,300c298,300
<              dout_aclk400_disp1       1        1        0   120000000          0     0  50000
<                 mout_sw_aclk400_disp1       0        0        0   120000000          0     0  50000
<                    mout_user_aclk400_disp1       0        0        0   120000000          0     0  50000
---
>              dout_aclk400_disp1       1        1        0   300000000          0     0  50000
>                 mout_sw_aclk400_disp1       0        0        0   300000000          0     0  50000
>                    mout_user_aclk400_disp1       0        0        0   300000000          0     0  50000
315,323c315,323
<              dout_aclk200_fsys2       2        2        0    75000000          0     0  50000
<                 mout_sw_aclk200_fsys2       1        1        0    75000000          0     0  50000
<                    mout_user_aclk200_fsys2       1        1        0    75000000          0     0  50000
<                       aclk200_fsys2       2        2        0    75000000          0     0  50000
<                          sromc        0        0        0    75000000          0     0  50000
<                          mmc2         1        1        0    75000000          0     0  50000
<                          mmc1         0        0        0    75000000          0     0  50000
<                          mmc0         1        1        0    75000000          0     0  50000
<                          ufs          0        0        0    75000000          0     0  50000
---
>              dout_aclk200_fsys2       2        2        0   150000000          0     0  50000
>                 mout_sw_aclk200_fsys2       1        1        0   150000000          0     0  50000
>                    mout_user_aclk200_fsys2       1        1        0   150000000          0     0  50000
>                       aclk200_fsys2       2        2        0   150000000          0     0  50000
>                          sromc        0        0        0   150000000          0     0  50000
>                          mmc2         1        1        0   150000000          0     0  50000
>                          mmc1         0        0        0   150000000          0     0  50000
>                          mmc0         1        1        0   150000000          0     0  50000
>                          ufs          0        0        0   150000000          0     0  50000
345,350c345,350
<              dout_aclk333_g2d         1        1        0    83250000          0     0  50000
<                 mout_sw_aclk333_g2d       0        0        0    83250000          0     0  50000
<                    mout_user_aclk333_g2d       0        0        0    83250000          0     0  50000
<                       aclk333_g2d       0        0        0    83250000          0     0  50000
<                          g2d          0        0        0    83250000          0     0  50000
<                          smmu_g2d       0        0        0    83250000          0     0  50000
---
>              dout_aclk333_g2d         1        1        0   333000000          0     0  50000
>                 mout_sw_aclk333_g2d       0        0        0   333000000          0     0  50000
>                    mout_user_aclk333_g2d       0        0        0   333000000          0     0  50000
>                       aclk333_g2d       0        0        0   333000000          0     0  50000
>                          g2d          0        0        0   333000000          0     0  50000
>                          smmu_g2d       0        0        0   333000000          0     0  50000
352,359c352,359
<              dout_aclk333             2        2        0    95142858          0     0  50000
<                 mout_sw_aclk333       1        1        0    95142858          0     0  50000
<                    mout_user_aclk333       1        1        0    95142858          0     0  50000
<                       dout_mfc_blk       0        0        0    23785715          0     0  50000
<                          smmu_mfcr       0        0        0    23785715          0     0  50000
<                          smmu_mfcl       0        0        0    23785715          0     0  50000
<                       aclk333         1        1        0    95142858          0     0  50000
<                          mfc          0        0        0    95142858          0     0  50000
---
>              dout_aclk333             2        2        0   333000000          0     0  50000
>                 mout_sw_aclk333       1        1        0   333000000          0     0  50000
>                    mout_user_aclk333       1        1        0   333000000          0     0  50000
>                       dout_mfc_blk       0        0        0    83250000          0     0  50000
>                          smmu_mfcr       0        0        0    83250000          0     0  50000
>                          smmu_mfcl       0        0        0    83250000          0     0  50000
>                       aclk333         1        1        0   333000000          0     0  50000
>                          mfc          0        0        0   333000000          0     0  50000
361,363c361,363
<              dout_aclk100_noc         1        1        0    83250000          0     0  50000
<                 mout_sw_aclk100_noc       0        0        0    83250000          0     0  50000
<                    mout_user_aclk100_noc       0        0        0    83250000          0     0  50000
---
>              dout_aclk100_noc         1        1        0    95142858          0     0  50000
>                 mout_sw_aclk100_noc       0        0        0    95142858          0     0  50000
>                    mout_user_aclk100_noc       0        0        0    95142858          0     0  50000
365c365
<              dout_aclk400_mscl        1        1        0    83250000          0     0  50000
---
>              dout_aclk400_mscl        1        1        0   333000000          0     0  50000
369,371c369,371
<              dout_pclk200_fsys        1        1        0    95142858          0     0  50000
<                 mout_sw_pclk200_fsys       0        0        0    95142858          0     0  50000
<                    mout_user_pclk200_fsys       0        0        0    95142858          0     0  50000
---
>              dout_pclk200_fsys        1        1        0   166500000          0     0  50000
>                 mout_sw_pclk200_fsys       0        0        0   166500000          0     0  50000
>                    mout_user_pclk200_fsys       0        0        0   166500000          0     0  50000
429,442c429,442
<              dout_aclk166             1        1        0    83250000          0     0  50000
<                 mout_sw_aclk166       0        0        0    83250000          0     0  50000
<                    mout_user_aclk166       0        0        0    83250000          0     0  50000
<                       aclk166         0        0        0    83250000          0     0  50000
<                          dout_jpg_blk       0        0        0    41625000          0     0  50000
<                             smmu_jpeg2       0        0        0    41625000          0     0  50000
<                             smmu_jpeg       0        0        0    41625000          0     0  50000
<     fout_apll                         0        0        0   600000000          0     0  50000
<        mout_apll                      0        0        0   600000000          0     0  50000
<           armclk                      0        0        0   600000000          0     0  50000
<           sclk_apll                   0        0        0   150000000          0     0  50000
<           mout_cpu                    0        0        0   600000000          0     0  50000
<              div_arm                  0        0        0   600000000          0     0  50000
<                 armclk2               0        0        0   600000000          0     0  50000
---
>              dout_aclk166             1        1        0   166500000          0     0  50000
>                 mout_sw_aclk166       0        0        0   166500000          0     0  50000
>                    mout_user_aclk166       0        0        0   166500000          0     0  50000
>                       aclk166         0        0        0   166500000          0     0  50000
>                          dout_jpg_blk       0        0        0    83250000          0     0  50000
>                             smmu_jpeg2       0        0        0    83250000          0     0  50000
>                             smmu_jpeg       0        0        0    83250000          0     0  50000
>     fout_apll                         0        0        0  2000000000          0     0  50000
>        mout_apll                      0        0        0  2000000000          0     0  50000
>           armclk                      0        0        0  2000000000          0     0  50000
>           sclk_apll                   0        0        0   500000000          0     0  50000
>           mout_cpu                    0        0        0  2000000000          0     0  50000
>              div_arm                  0        0        0  2000000000          0     0  50000
>                 armclk2               0        0        0  2000000000          0     0  50000

##########################################################################

# Hardkernel Odroid XU4

Tested with sbc-bench v0.9.36 on Wed, 01 Mar 2023 17:45:04 +0100.

### General information:

The CPU features 2 clusters of different core types:

    Samsung Exynos EXYNOS5800 rev 1, Exynos 5422, Kernel: armv7l, Userland: armhf
    
    CPU sysfs topology (clusters, cpufreq members, clockspeeds)
                     cpufreq   min    max
     CPU    cluster  policy   speed  speed   core type
      0        1        0      200    1400   Cortex-A7 / r0p3
      1        1        0      200    1400   Cortex-A7 / r0p3
      2        1        0      200    1400   Cortex-A7 / r0p3
      3        1        0      200    1400   Cortex-A7 / r0p3
      4        0        4      200    2000   Cortex-A15 / r2p3
      5        0        4      200    2000   Cortex-A15 / r2p3
      6        0        4      200    2000   Cortex-A15 / r2p3
      7        0        4      200    2000   Cortex-A15 / r2p3

1990 KB available RAM

### Governors/policies (performance vs. idle consumption):

Original governor settings:

    cpufreq-policy0: ondemand / 1400 MHz (powersave userspace conservative ondemand performance schedutil / 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)
    cpufreq-policy4: ondemand / 2000 MHz (powersave userspace conservative ondemand performance schedutil / 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000)
    soc:bus_wcore: simple_ondemand / 84 MHz (userspace powersave performance simple_ondemand / 84 111 222 333 400)
    10c20000.memory-controller: simple_ondemand / 825 MHz (userspace powersave performance simple_ondemand / 165 206 275 413 543 633 728 825)

Tuned governor settings:

    cpufreq-policy0: performance / 1400 MHz
    cpufreq-policy4: performance / 2000 MHz
    soc:bus_wcore: performance / 400 MHz
    10c20000.memory-controller: performance / 825 MHz

Status of performance related policies found below /sys:

    /sys/devices/platform/soc/11800000.gpu/power_policy: [demand] coarse_demand always_on

### Clockspeeds (idle vs. heated up):

Before at 31.0Â°C:

    cpu0-cpu3 (Cortex-A7): OPP: 1400, Measured: 1396 
    cpu4-cpu7 (Cortex-A15): OPP: 2000, Measured: 1996 

After at 76.0Â°C (throttled):

    cpu0-cpu3 (Cortex-A7): OPP: 1400, Measured: 1396 
    cpu4-cpu7 (Cortex-A15): OPP: 2000, Measured: 1996 

### Performance baseline

  * cpu0 (Cortex-A7): memcpy: 330.5 MB/s, memchr: 424.2 MB/s, memset: 799.6 MB/s
  * cpu4 (Cortex-A15): memcpy: 2286.5 MB/s, memchr: 3050.9 MB/s, memset: 4837.3 MB/s
  * cpu0 (Cortex-A7) 16M latency: 159.5 163.8 159.5 165.5 159.5 165.3 297.0 570.8 
  * cpu4 (Cortex-A15) 16M latency: 174.8 175.4 174.8 175.4 174.8 175.6 175.3 202.8 
  * 7-zip MIPS (3 consecutive runs): 8465, 8304, 8221 (8330 avg), single-threaded: 1724
  * `aes-256-cbc      20446.77k    25319.72k    26717.87k    27091.29k    27202.90k    27148.29k (Cortex-A7)`
  * `aes-256-cbc      58473.23k    66768.11k    70337.28k    71281.66k    71516.16k    71538.01k (Cortex-A15)`

### Storage devices:

  * 3.7TB "HGST HDN724040ALE640" HDD as /dev/sda [SATA 3.0, 6.0 Gb/s (current: 6.0 Gb/s)]: behind JMicron JMS578 SATA 6Gb/s bridge, Driver=uas, 5000Mbps (capable of 12Mbps, 480Mbps, 5Gbps), drive temp: 27Â°C
  * 14.9GB "SanDisk SC16G" UHS SDR104 SD card as /dev/mmcblk1: date 06/2019, manfid/oemid: 0x000003/0x5344, hw/fw rev: 0x8/0x0

### Swap configuration:

  * /dev/zram0: 995.2M (0K used, lzo-rle, 8 streams, 4K data, 74B compressed, 4K total)

### Software versions:

  * Ubuntu 20.04.3 LTS (focal) arm
  * Build scripts: https://github.com/armbian/build, 21.08.3, Odroid XU4, odroidxu4, odroidxu4
  * Compiler: /usr/bin/gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0 / arm-linux-gnueabihf
  * OpenSSL 1.1.1f, built on 31 Mar 2020          

### Kernel info:

  * `/proc/cmdline: console=ttySAC2,115200n8 console=tty1 consoleblank=0 loglevel=1 root=UUID=57f06418-7fe0-4d7a-89b9-31dcc07b8b27 rootfstype=ext4 rootwait rw  smsc95xx.macaddr=00:1e:06:61:7a:55 governor=performance hdmi_tx_amp_lvl=31 hdmi_tx_lvl_ch0=3 hdmi_tx_lvl_ch1=3 hdmi_tx_lvl_ch2=3 hdmi_tx_emp_lvl=6 hdmi_clk_amp_lvl=31 hdmi_tx_res=0 HPD=true vout=hdmi usb-storage.quirks= `
  * Kernel 5.4.151-odroidxu4 / CONFIG_HZ=100

Kernel 5.4.151 is not latest 5.4.233 LTS that was released on 2023-02-25.

See https://endoflife.date/linux for details. It is somewhat likely that
a lot of exploitable vulnerabilities exist for this kernel as well as many
unfixed bugs.

But this version string doesn't matter since this is not an official LTS Linux
from kernel.org. This device runs a Samsung vendor/BSP kernel.
